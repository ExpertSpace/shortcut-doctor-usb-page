#!/usr/bin/env python3
# generate_hashes.py
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ JAR –∏ EXE —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
# –í—ã—á–∏—Å–ª—è–µ—Ç size, sha256 –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é
# –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ hashes.json

import hashlib
import json
import os
import zipfile
import re
import sys
import glob

try:
    import pefile
except Exception:
    pefile = None

def find_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ JAR –∏ EXE —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    jar_files = glob.glob("*.jar") + glob.glob("*.JAR")
    exe_files = glob.glob("*.exe") + glob.glob("*.EXE")
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –±—ç–∫–∞–ø—ã
    jar_files = [f for f in jar_files if not any(x in f.lower() for x in ['temp', 'backup', 'old', 'bak'])]
    exe_files = [f for f in exe_files if not any(x in f.lower() for x in ['temp', 'backup', 'old', 'bak'])]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤–µ–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    jar_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    exe_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    latest_jar = jar_files[0] if jar_files else None
    latest_exe = exe_files[0] if exe_files else None
    
    files = []
    if latest_jar:
        files.append(latest_jar)
        print(f"üì¶ –ù–∞–π–¥–µ–Ω JAR —Ñ–∞–π–ª: {latest_jar}")
    
    if latest_exe:
        files.append(latest_exe)
        print(f"ü™ü –ù–∞–π–¥–µ–Ω EXE —Ñ–∞–π–ª: {latest_exe}")
    
    if not files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JAR –∏–ª–∏ EXE —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:", os.listdir('.'))
    
    return files

def sha256sum(filename, block_size=1 << 16):
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
    h = hashlib.sha256()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(block_size), b""):
            h.update(chunk)
    return h.hexdigest()

def parse_manifest_bytes(b):
    """–ü–∞—Ä—Å–∏—Ç MANIFEST.MF –∏–∑ JAR —Ñ–∞–π–ª–∞"""
    try:
        s = b.decode('utf-8', errors='replace')
    except Exception:
        s = str(b)
    d = {}
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
    lines = s.splitlines()
    current_key = None
    current_value = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        if ':' in line and not line.startswith(' '):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
            if current_key and current_value:
                d[current_key] = ' '.join(current_value).strip()
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
            k, v = line.split(':', 1)
            current_key = k.strip()
            current_value = [v.strip()]
        elif current_key and line.startswith(' '):
            # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            current_value.append(line.strip())
        else:
            # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
            if current_key and current_value:
                d[current_key] = ' '.join(current_value).strip()
            current_key = None
            current_value = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É
    if current_key and current_value:
        d[current_key] = ' '.join(current_value).strip()
    
    return d

def parse_properties_bytes(b):
    """–ü–∞—Ä—Å–∏—Ç properties —Ñ–∞–π–ª—ã"""
    try:
        s = b.decode('utf-8', errors='replace')
    except Exception:
        s = str(b)
    props = {}
    for line in s.splitlines():
        line = line.strip()
        if not line or line.startswith('#') or '=' not in line:
            continue
        k, v = line.split('=', 1)
        props[k.strip()] = v.strip()
    return props

def get_version_from_jar(path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ JAR —Ñ–∞–π–ª–∞"""
    try:
        with zipfile.ZipFile(path, 'r') as z:
            # 1) –ò—â–µ–º MANIFEST.MF
            manifest_name = None
            for name in z.namelist():
                if 'META-INF/MANIFEST.MF' in name.upper():
                    manifest_name = name
                    break
            
            if manifest_name:
                try:
                    mbytes = z.read(manifest_name)
                    m = parse_manifest_bytes(mbytes)
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –≤–µ—Ä—Å–∏–∏
                    version_keys = [
                        'Implementation-Version',
                        'Specification-Version', 
                        'Bundle-Version',
                        'Version',
                        'Project-Version'
                    ]
                    
                    for key in version_keys:
                        if key in m and m[key].strip():
                            version = m[key].strip()
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                            version = ' '.join(version.split())
                            return version
                except Exception as e:
                    print(f"[warn] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
            
            # 2) –ò—â–µ–º pom.properties
            for name in z.namelist():
                if 'pom.properties' in name.lower() and 'maven' in name.lower():
                    try:
                        pbytes = z.read(name)
                        props = parse_properties_bytes(pbytes)
                        if 'version' in props and props['version'].strip():
                            return props['version'].strip()
                    except Exception:
                        pass
            
            # 3) –ò—â–µ–º –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = os.path.basename(path)
            version_match = re.search(r'(\d+\.\d+\.\d+(?:\.\d+)?)', filename)
            if version_match:
                return version_match.group(1)
                
    except Exception as e:
        print(f"[warn] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JAR {path}: {e}")
    return None

def get_version_from_exe(path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ EXE —Ñ–∞–π–ª–∞"""
    # 1) –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ pefile
    if pefile:
        try:
            pe = pefile.PE(path)
            if hasattr(pe, 'FileInfo') and pe.FileInfo:
                for fileinfo in pe.FileInfo:
                    if hasattr(fileinfo, 'Key') and fileinfo.Key.decode(errors='ignore') == 'StringFileInfo':
                        for st in fileinfo.StringTable:
                            for entry in st.entries.items():
                                key = entry[0].decode(errors='ignore') if isinstance(entry[0], bytes) else str(entry[0])
                                value = entry[1].decode(errors='ignore') if isinstance(entry[1], bytes) else str(entry[1])
                                if key in ('FileVersion', 'ProductVersion', 'Version') and value.strip():
                                    # –û—á–∏—â–∞–µ–º –≤–µ—Ä—Å–∏—é –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                                    version = re.search(r'(\d+\.\d+\.\d+(?:\.\d+)?)', value)
                                    if version:
                                        return version.group(1)
                                    return value.strip()
        except Exception as e:
            print(f"[warn] –û—à–∏–±–∫–∞ pefile –¥–ª—è {path}: {e}")
    
    # 2) –ü–æ–∏—Å–∫ –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with open(path, 'rb') as f:
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 500KB –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–∏
            data = f.read(500000)
        
        # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        version_patterns = [
            rb'(\d+\.\d+\.\d+\.\d+)',  # 1.2.3.4
            rb'(\d+\.\d+\.\d+)',       # 1.2.3
            rb'v?(\d+\.\d+)',          # 1.2 –∏–ª–∏ v1.2
        ]
        
        for pattern in version_patterns:
            matches = re.findall(pattern, data)
            if matches:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                for match in matches:
                    try:
                        version = match.decode('ascii', errors='ignore')
                        if version and len(version) <= 20:  # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä
                            return version
                    except:
                        continue
                        
    except Exception as e:
        print(f"[warn] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ EXE {path}: {e}")
    
    # 3) –ò—â–µ–º –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    filename = os.path.basename(path)
    version_match = re.search(r'(\d+\.\d+\.\d+(?:\.\d+)?)', filename)
    if version_match:
        return version_match.group(1)
    
    return None

def get_file_info(filepath):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    info = {"size": None, "sha256": None, "version": None}
    
    if not os.path.exists(filepath):
        return info
    
    try:
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        info["size"] = os.path.getsize(filepath)
    except Exception as e:
        print(f"[error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä {filepath}: {e}")
    
    try:
        # SHA-256 —Ö–µ—à
        print(f"üîç –í—ã—á–∏—Å–ª—è—é —Ö–µ—à –¥–ª—è {filepath}...")
        info["sha256"] = sha256sum(filepath)
    except Exception as e:
        print(f"[error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à {filepath}: {e}")
    
    try:
        # –í–µ—Ä—Å–∏—è
        if filepath.lower().endswith('.jar'):
            info["version"] = get_version_from_jar(filepath)
        elif filepath.lower().endswith('.exe'):
            info["version"] = get_version_from_exe(filepath)
        
        if info["version"]:
            print(f"‚úÖ –í–µ—Ä—Å–∏—è {filepath}: {info['version']}")
        else:
            print(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è –¥–ª—è {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"[error] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ {filepath}: {e}")
    
    return info

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–æ–∏—Å–∫ JAR –∏ EXE —Ñ–∞–π–ª–æ–≤...")
    
    files = find_files()
    if not files:
        print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π hashes.json")
        with open("hashes.json", "w", encoding="utf-8") as f:
            json.dump({}, f, indent=2, ensure_ascii=False)
        return
    
    result = {}
    
    for filepath in files:
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {filepath}")
        result[filepath] = get_file_info(filepath)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open("hashes.json", "w", encoding="utf-8") as f:
        json.dump(result, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ hashes.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    for filename, info in result.items():
        print(f"   {filename}:")
        print(f"     –†–∞–∑–º–µ—Ä: {info['size']} –±–∞–π—Ç")
        print(f"     SHA-256: {info['sha256']}")
        print(f"     –í–µ—Ä—Å–∏—è: {info['version'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ pefile –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not pefile:
        print("\n‚ö†Ô∏è –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π EXE —Ñ–∞–π–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("pip install pefile")

if __name__ == "__main__":
    main()